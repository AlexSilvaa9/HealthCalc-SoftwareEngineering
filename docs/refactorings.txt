

Bad smell: Large class /Sympthom: too many resoibsibility /Violacion del principio de segregación de interfaces
Extract Class: dividimos la interfaz calculadora en dos interfaces, una para cada operación
Tipo:class refactoring
Ahora, calculadoraSalud tendra un objeto CardiovascularMtreics y otro MetabolicMetrics
2 clases nuevas, dos interfaces, cambios en dos metodos de HealthCalcImp, añadidos atributos en esta.

Bad smelling: diferencias entre tipos numericos
Cambio de tipo de salida en los calculos a double
method refactoring
Cambiaremos el tipo de salida a double para unificarlos.
2 metodos, 2 metodos en HealthCalcImp y los returns de HealthCalc. Returns del proxy y hacer cast en adapter. cambiar tipo de las variables resultado del controlador a double.(Importante no cambiar la interfaz HealthHospital porque no es nuestra)

metodo muy grande,con muchos parametros de entrada-LONG PARAMETER LIST

(1) el nombre (en inglés o español) del “bad smell” o el problema que resuelve el refactoring aplicado
(ejemplo: duplicación de código, clase Dios, método con muchos parámetros,…),
(2) el/los refactorings aplicados para resolverlo (extracción de método, encapsulación de campo,…)
(3) el tipo/categoría del refactoring (class refactoring, method refactoring, attribute refactoring),
(4) una breve descripción del cambio que ha realizado en su proyecto (un pequeño párrafo de 2 o 3
líneas como máximo).
(5) número de cambios manuales que has tenido que hacer para aplicar el refactoring. Por ejemplo: 2
líneas de código, 3 clases,… (Contar solo los cambios manuales, no los que haga la herramienta
automáticamente).

grupos cohesionados pueden constituir clases independientes-Data Clumps-Data that are always used together

